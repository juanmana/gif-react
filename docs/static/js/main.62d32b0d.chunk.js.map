{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GigGriditem.js","components/GifGrid.js","hooks/useFetchGifs.js","components/GifExpertApp.js","index.js"],"names":["AddCategory","props","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GigGriditem","console","log","className","animated__animated","animated__fadeIn","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"qMAEaA,EAAc,SAACC,GAAW,IAE9BC,EAAiBD,EAAjBC,cAF6B,EAGAC,mBAAS,IAHT,mBAG7BC,EAH6B,KAGjBC,EAHiB,KAuBpC,OACE,0BAAMC,SAfa,SAACC,GAEpBA,EAAEC,iBAICJ,EAAWK,OAAOC,OAAS,IAE7BR,GAAe,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OAEvCN,EAAc,OAMb,2BACEO,KAAK,OACLC,MAAOT,EACPU,SAvBoB,SAACP,GACzBF,EAAcE,EAAEQ,OAAOF,Y,uBCOdG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,0DAEkCC,UAAUH,GAF5C,sDAIAI,MAAMF,GAJN,cAIbG,EAJa,gBAMIA,EAAKC,OANT,uBAMXC,EANW,EAMXA,KAEFC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAC7B,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAZnB,kBAiBZM,GAjBY,4CAAH,sDCbPO,EAAc,SAAC/B,GAAW,IAG5B0B,EAAO1B,EAAP0B,IAGP,OADJM,QAAQC,IAAIP,GAIJ,yBAAKQ,UAAU,OAAOC,oBAAkB,EAACC,kBAAgB,GAErD,yBAAKC,IAAKX,EAAIR,IAAKoB,IAAKZ,EAAIE,QACpC,2BAAIF,EAAIE,SCTCW,EAAU,SAAC,GAAkB,IAAhBvB,EAAe,EAAfA,SAAe,ECFb,SAACA,GAAY,IAAD,EAGTd,mBAAS,CAGhCqB,KAAK,GACLiB,SAAS,IAPuB,mBAG5BC,EAH4B,KAGrBC,EAHqB,KAgCpC,OApBFC,qBAAU,WAER5B,EAASC,GACR4B,MAAK,SAAAC,GAEFH,EAAS,CAELnB,KAAKsB,EACLL,SAAQ,SAMf,CAACxB,IAMKyB,ED3ByBK,CAAa9B,GAAhCa,EAHwB,EAG7BN,KAAaiB,EAHgB,EAGhBA,QAIvB,OAEI,oCACF,wBAAIN,UAAU,qDAAqDlB,GAIpEwB,GAAW,sCAGV,yBAAKN,UAAU,aAGVL,EAAOJ,KAAI,SAAAC,GAAG,OAEX,kBAAC,EAAD,CACAqB,IAAKrB,EAAIC,GACTD,IAAKA,UEQFsB,EAjCM,WAAO,IAAD,EAMS9C,mBAAS,CAAC,SANnB,mBAMpB+C,EANoB,KAMRhD,EANQ,KASzB,OACE,oCACE,4CAEA,kBAAC,EAAD,CAAaA,cAAeA,IAC5B,6BAIA,4BAEEgD,EAAWxB,KAAI,SAAAT,GAAQ,OAErB,kBAAC,EAAD,CAEA+B,IAAK/B,EACLA,SAAUA,UCxBpBkC,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,U","file":"static/js/main.62d32b0d.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nexport const AddCategory = (props) => {\n\n  const {setCategories} = props;  \n  const [inputValue, setInputValue] = useState(\"\");\n\n  const handleInputChange = (e) => {\n    setInputValue(e.target.value);\n  };\n\n  const handleSubmit = (e) => {\n\n    e.preventDefault();\n\n\n\n    if(inputValue.trim().length > 2){\n    \n     setCategories( cats => [inputValue, ...cats])\n\n     setInputValue('')\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        value={inputValue}\n        onChange={handleInputChange}\n      ></input>\n    </form>\n  );\n};\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nexport const getGifs = async (category) => {\n    const url =\n      `https://api.giphy.com/v1/gifs/search?limit=10&q=${encodeURI(category)}&api_key=aj6Y7G2hXCLxjQLAmM2FexXY2QVPvdOu`;\n\n    const resp = await fetch(url);\n\n    const { data } = await resp.json();\n\n    const gifs = data.map((img) => {\n      return {\n        id: img.id,\n        title: img.title,\n        url: img.images?.downsized_medium.url,\n      };\n    });\n\n\n    return gifs;\n  };","import React from 'react'\n\nexport const GigGriditem = (props) => {\n\n\n    const {img} = props;\n\nconsole.log(img);\n    return (\n\n\n        <div className=\"card\" animated__animated animated__fadeIn>\n\n            <img src={img.url} alt={img.title}/>\n    <p>{img.title}</p>\n        </div>\n    )\n}\n","import React from \"react\";\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\nimport { GigGriditem } from \"./GigGriditem\";\n// import {getGifs} from '../helpers/getGifs'\n\nexport const GifGrid = ({ category }) => {\n\n\n    const  {data:images, loading} = useFetchGifs(category);\n//   const [images, setImages] = useState([]);\n\n\n  return (\n\n      <>\n    <h3 className=\"animate__animated animate__bounce animate__faster\">{category}</h3>\n\n\n\n  {loading && <p>Loading</p>}\n\n\n    <div className=\"card-grid\">\n\n      \n        {images.map(img => (\n\n            <GigGriditem \n            key={img.id}\n            img={img}/>\n        )\n        )}\n      \n    </div>\n    </>\n  );\n};\n","import {useState,useEffect} from 'react';\nimport {getGifs} from '../helpers/getGifs'\n\nexport const useFetchGifs = (category)=>{\n\n\n     const [state, setState] = useState({\n\n\n        data:[],\n        loading: true\n    });\n\n\n\n  useEffect(() => {\n\n    getGifs (category)\n    .then(imgs=>{\n\n        setState({\n\n            data:imgs,\n            loading:false\n        })\n\n\n    })\n  \n  }, [category]);\n\n  \n\n\n\n    return state;\n}","import React, {useState} from \"react\";\nimport {AddCategory} from '../components/AddCategory'\nimport {GifGrid} from '../components/GifGrid'\n\nconst GifExpertApp = () => {\n\n\n\n\n\nconst [categories, setCategories] = useState([\"goku\"])\n\n\n  return (\n    <>\n      <h2>GifExpertApp</h2>\n\n      <AddCategory setCategories={setCategories} />\n      <hr />\n\n\n\n      <ol>\n        {\n        categories.map(category  => (\n\n          <GifGrid \n          \n          key={category}\n          category={category} />\n        ))\n}\n      </ol>\n    </>\n  );\n};\n\nexport default GifExpertApp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpertApp from './components/GifExpertApp'\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}